
  deepdive.db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user: ${PGUSER}
    password: ${PGPASSWORD}
    dbname: ${DBNAME}
    host: ${PGHOST}
    port: ${PGPORT}
    incremental_mode: ORIGINAL
    }
    


      deepdive.schema.variables {
        review_sentiment.label: Boolean
      }
    

      deepdive.extraction.extractors.ext_review_sentiment {
        cmd: """

	# TODO use temporary table
	deepdive create table "review_sentiment"
	deepdive sql 'INSERT INTO review_sentiment SELECT DISTINCT R0.review_id, R1.index, 0 AS id, 
CASE WHEN R1.index = R0.sentiment THEN true
     ELSE false
END AS label
          FROM reviews R0, sentiments R1
        
          '
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "review_sentiment"
        style: "cmd_extractor"
          
          input_relations: [
            reviews
            sentiments
          ]
      }
    

        deepdive.extraction.extractors.ext_review_feature_by_extract_features {
          input: """ SELECT R0.review_id AS "reviews.R0.review_id", R0.sentence AS "reviews.R0.sentence"
FROM reviews R0
        
          """
          output_relation: "review_feature"
          udf: ${APP_HOME}"/udf/extract_features.py"
          style: "tsv_extractor" 
          
          input_relations: [
            reviews
          ]
          input_batch_size: ${INPUT_BATCH_SIZE}
          parallelism: ${PARALLELISM}
        }
      

        deepdive.inference.factors.inf_istrue_review_sentiment {
          input_query: """
          SELECT R0.id AS "review_sentiment.R0.id" , R2.feature AS "dd_weight_column_0" 
          FROM review_sentiment R0, reviews R1, review_feature R2
        WHERE R1.review_id = R0.index  AND R2.id = R0.index """
          function: "Imply(review_sentiment.R0.label)"
          weight: "?(dd_weight_column_0)"
          dependencies: [ "ext_review_feature_by_extract_features" ]
          input_relations: [
            review_sentiment
            reviews
            review_feature
          ]
        }
      
deepdive.pipeline.run: ${PIPELINE}
deepdive.pipeline.pipelines.extraction: [
  ext_review_sentiment
  ext_review_feature_by_extract_features
]
deepdive.pipeline.pipelines.inference: [
  inf_istrue_review_sentiment
]
deepdive.pipeline.pipelines.endtoend: [
  ext_review_sentiment
  ext_review_feature_by_extract_features
  inf_istrue_review_sentiment
]
deepdive.calibration.holdout_fraction:0.25
deepdive.sampler.sampler_args: "-l 1000 -s 1 -i 1000 --alpha 0.01 --sample_evidence"
deepdive.schema {"relations" : {"reviews" : {"columns" : {"review_id" : {"type" : "int", "index" : 0}, "sentence" : {"type" : "text", "index" : 1}, "sentiment" : {"type" : "int", "index" : 2}}}, "sentiments" : {"columns" : {"sentiment" : {"type" : "text", "index" : 0}, "index" : {"type" : "int", "index" : 1}}}, "review_feature" : {"columns" : {"id" : {"type" : "int", "index" : 0}, "feature" : {"type" : "text", "index" : 1}}}, "review_sentiment" : {"columns" : {"index" : {"type" : "int", "index" : 0}, "sentiment_id" : {"type" : "int", "index" : 1}}, "variable_type" : "boolean", "variable_cardinality" : 2}}}
